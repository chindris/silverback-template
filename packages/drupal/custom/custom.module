<?php

/**
 * @file
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\RenderContext;
use Drupal\Core\StreamWrapper\LocalStream;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\Core\Utility\Error as ErrorUtil;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\silverback_gutenberg\LinkProcessor;
use Drupal\user\Entity\Role;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_default_content_exported_fields_alter().
 */
function custom_default_content_exported_fields_alter(array &$fields, ContentEntityInterface $entity) {

  // These change randomly and bring no value.
  unset(
    $fields['metatag'],
    $fields['external_preview_link'],
    $fields['access'],
    $fields['revision_translation_affected'],
    $fields['role_change'],
  );

  // If pathauto is enabled, content export may lose the path aliases.
  if (isset($fields['path'])) {
    if ($fields['path']->pathauto == 1) {
      $fields['path']->pathauto = 0;
    }
    foreach ($entity->getTranslationLanguages(FALSE) as $langcode => $_) {
      $translation = $entity->getTranslation($langcode);
      if ($translation->get('path')->pathauto == 1) {
        $translation->get('path')->pathauto = 0;
      }
    }
  }
}

/**
 * Implements hook_silverback_gutenberg_link_processor_outbound_url_alter().
 */
function custom_silverback_gutenberg_link_processor_outbound_url_alter(
  string &$url,
  LanguageInterface $language,
  LinkProcessor $linkProcessor
) {

  // For some links pointing to media, we want to print the direct file URL
  // instead of the media route.
  if (preg_match('#^(/[a-z]{2})?/media/([0-9]+)(/edit)?$#', $url, $matches)) {
    $mediaBundles = ['document'];
    \Drupal::service('renderer')->executeInRenderContext(
      new RenderContext(),
      function () use (&$url, $matches, $language, $mediaBundles) {
        $mediaId = $matches[2];
        try {
          /** @var \Drupal\media\MediaInterface $media */
          $media = Media::load($mediaId);
          if (
            $language->getId() !== $media->language()->getId() &&
            $media->hasTranslation($language->getId())
          ) {
            $media = $media->getTranslation($language->getId());
          }
          if (
            in_array($media->bundle(), $mediaBundles) &&
            $media->access('view')
          ) {
            $source = $media->getSource()->getSourceFieldValue($media);
            $file = File::load($source);
            $url = $file->createFileUrl();
          }
        } catch (\Throwable $e) {
          \Drupal::logger('custom')->error(
            'Error turning media (id: "{mediaId}") route into file url. Error: {error}',
            [
              'mediaId' => $mediaId,
              'error' => ErrorUtil::renderExceptionSafe($e),
            ]
          );
        }
      }
    );
  }
}

/**
 * Implements hook_silverback_gutenberg_link_processor_inbound_link_alter().
 *
 * @param \DOMElement $link
 * @param \Drupal\silverback_gutenberg\LinkProcessor $linkProcessor
 *
 * @return void
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function custom_silverback_gutenberg_link_processor_inbound_link_alter(
  \DOMElement $link,
  LinkProcessor $linkProcessor
) {
  // For inbound links (when data gets saved), if the link points to a public
  // file, then we want to replace the href value with "media/uuid/edit" and
  // also make sure the data-id and data-entity-type attributes have the proper
  // values (the uuid and the 'media' value). This is a special case for media,
  // because the url of the media item is replaced by
  // custom_silverback_gutenberg_link_processor_outbound_url_alter() with the
  // file path, so now on inbound we need to basically do the opposite. This is
  // needed so that the entity usage integration works properly (where the
  // data-id and data-entity-type attributes are checked).
  $href = $link->getAttribute('href');
  /** @var \Drupal\Core\StreamWrapper\StreamWrapperManager $wrapperManager */
  $wrapperManager = \Drupal::service('stream_wrapper_manager');
  /** @var \Drupal\Core\StreamWrapper\StreamWrapperInterface[] $visibleWrappers */
  $visibleWrappers = $wrapperManager->getWrappers(StreamWrapperInterface::VISIBLE);
  foreach ($visibleWrappers as $scheme => $wrapperInfo) {
    $wrapper = $wrapperManager->getViaScheme($scheme);
    // We are only handle local streams for now.
    if (!$wrapper instanceof LocalStream) {
      continue;
    }
    if (!str_starts_with($href, '/' . $wrapper->getDirectoryPath() . '/')) {
      continue;
    }
    // When searching for a file inside the database, the wrapper uri is used
    // instead of the directory path. That is why we need the wrapper in the
    // first place.
    $fileuri = str_replace('/' . $wrapper->getDirectoryPath() . '/', $wrapper->getUri(), urldecode($href));
    $files = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $fileuri]);
    // No files found, just continue to the next wrapper.
    if (empty($files)) {
      continue;
    }
    $file = array_shift($files);
    $usageList = \Drupal::service('file.usage')->listUsage($file);
    // If the media file usage list is empty, then this is probably some kind of
    // orphan file, or tracked by some other entity type.
    if (empty($usageList['file']['media'])) {
      continue;
    }
    $mids = array_keys($usageList['file']['media']);
    $mid = reset($mids);
    $media = Media::load($mid);
    if (empty($media)) {
      continue;
    }
    // If we got here, we found a matching media item, so we can populate the
    // link metadata with its values and just break out of the wrappers loop.
    $link->setAttribute('href', '/media/' . $media->uuid() . '/edit');
    $link->setAttribute('data-id', $media->uuid());
    $link->setAttribute('data-entity-type', 'media');
    break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Using global form_alter as it's to be executed at the very late stage.
 *
 * @see custom_heavy_module_implements_alter
 */
function custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  if (!$form_object instanceof ContentEntityFormInterface) {
    return;
  }

  // Gutenberg v2 is only enabled for nodes.
  $entity = $form_state->getFormObject()->getEntity();
  if (!$entity instanceof NodeInterface) {
    return;
  }

  if (!_gutenberg_is_gutenberg_enabled($entity)) {
    return;
  }

  // Move the moderation state widget into the gutenberg sidebar.
  if (array_key_exists('moderation_state', $form)) {
    $form['moderation_state']['#group'] = 'meta';
  }

  // Move metatags in the sidebar.
  // #group won't work here.
  if (
    array_key_exists('field_metatags', $form) &&
    !empty($form['#fields_with_details'])
  ) {
    foreach ($form['#fields_with_details'] as $key => $value) {
      if ($value === 'field_metatags') {
        unset($form['#fields_with_details'][$key]);
        break;
      }
    }
  }

  // Move the SEO group inside the sidebar.
  if (!empty($form['#fieldgroups']['group_seo']) && $form['#fieldgroups']['group_seo']->parent_name === 'metabox_fields') {
    // First, make sure to move back the seo fields into the seo group, because
    // the gutenberg module moved them into the metabox_fields group.
    foreach ($form['#fieldgroups']['group_seo']->children as $seo_field_name) {
      if (!empty($form[$seo_field_name])) {
        $form[$seo_field_name]['#group'] = 'group_seo';
      }
    }
    // Move now the SEO group into the sidebar and position it right bellow the
    // meta group.
    $form['#fieldgroups']['group_seo']->parent_name = 'advanced';
    if (!empty($form['meta']['#weight'])) {
      $form['#fieldgroups']['group_seo']->weight = $form['meta']['#weight'] + 1;
    }
  }

  // If the "More settings" fieldset is empty, remove it completely.
  $metaboxHasFields = FALSE;
  foreach (Element::children($form) as $key) {
    if (($form[$key]['#group'] ?? '') === 'metabox_fields') {
      $metaboxHasFields = TRUE;
      break;
    }
  }

  if (!$metaboxHasFields && isset($form['#fieldgroups'])) {
    foreach ($form['#fieldgroups'] as $group) {
      if (($group->parent_name ?? '') === 'metabox_fields') {
        $metaboxHasFields = TRUE;
        break;
      }
    }
  }

  if (!$metaboxHasFields) {
    $form['metabox_fields']['#access'] = FALSE;
  }

}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function custom_field_widget_language_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  // We don't want to include locked languages such as "Not specified" and
  // "Not applicable".
  /* @see \Drupal\Core\Field\Plugin\Field\FieldWidget\LanguageSelectWidget::formElement */
  $element['value']['#languages'] = LanguageInterface::STATE_CONFIGURABLE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove all the confusing options from the language list.
  unset(
    // Site's default language.
    $form['langcode']['#options']['***LANGUAGE_site_default***'],
    // Interface text language selected for page.
    $form['langcode']['#options']['***LANGUAGE_language_interface***'],
    // Not specified.
    $form['langcode']['#options']['und'],
    // Not applicable.
    $form['langcode']['#options']['zxx'],
  );
  // The `excludeIds` filter contains a list of UUIDs, and this might exceed the
  // 128 characters limit of the field. To avoid this, we increase the maxlength
  // of the exposed filter to 2048.
  if (!empty($form['excludeIds'])) {
    $form['excludeIds']['#maxlength'] = 2048;
  }
}

/**
 * Custom access check for key_auth.user_key_auth_form route.
 *
 * We can possibly remove this if #3261708 is solved.
 * https://www.drupal.org/project/key_auth/issues/3261708#comment-15035737
 */
function _custom_key_auth_form_access(UserInterface $user): AccessResult {
  $access = AccessResult::forbidden();
  if (\Drupal::currentUser()->id() == 1) {
    $access = AccessResult::allowed();
  } else {
    $roleIds = \Drupal::currentUser()->getRoles();
    if ($roleIds) {
      foreach (Role::loadMultiple($roleIds) as $role) {
        if ($role->isAdmin()) {
          $access = AccessResult::allowed();
          break;
        }
      }
    }
  }
  $access->addCacheContexts(['user.permissions']);
  $access->addCacheableDependency($user);
  return $access;
}

/**
 * Implements hook_file_download().
 *
 * Prevent any access to keys.
 */
function custom_file_download($uri) {
  if (str_starts_with($uri, 'private://') && str_ends_with($uri, '.key')) {
    throw new AccessDeniedHttpException();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function custom_views_data_alter(array &$data) {
  $data['node_field_revision']['custom_node_revision_title'] = [
    'field' => [
      'title' => t('Revision title.'),
      'help' => t('Title with optional link to the revision that matches the core content view EX (canonical or latest version url).'),
      'id' => 'custom_node_revision_title',
      'field' => 'title',
      'click sortable' => TRUE,
    ],
  ];

  $data['media']['custom_usage_count'] = [
    'title' => t('Usage count'),
    'help' => t('Display entity usage count.'),
    'field' => [
      'id' => 'custom_usage_count',
      'click sortable' => FALSE,
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for "html".
 */
function custom_preprocess_html(&$variables) {
  _custom_add_session_iframe_to_page($variables);
}

/**
 * Adds a hidden iframe to set the session expiration time on the frontend.
 *
 * @param array $variables
 *   Variables passed to hook_preprocess_html().
 *
 * @return void
 */
function _custom_add_session_iframe_to_page(array &$variables): void {
  $variables['page_bottom']['frontend_session_iframe'] = [
    '#cache' => [
      'max-age' => 0,
    ],
  ];
  // Do not add the iframe if silverback_iframe_theme is the current theme. We
  // don't want to load the iframe in the iframe.
  $isDefaultTheme = \Drupal::theme()->getActiveTheme()->getName() === \Drupal::config('system.theme')->get('default');
  if ($isDefaultTheme) {
    // Currently, any authenticated user is considered an editor.
    $isEditor = \Drupal::currentUser()->isAuthenticated();
    if ($isEditor) {
      // Guess the probable session expiration time.
      /** @var \Drupal\Core\Session\MetadataBag $sessionMeta */
      $sessionMeta = \Drupal::service('session_manager.metadata_bag');
      /** @var \Drupal\Core\Session\SessionConfiguration $sessionConfig */
      $sessionConfig = \Drupal::service('session_configuration');
      $sessionOptions = $sessionConfig->getOptions(\Drupal::request());
      $cookieLifetime = $sessionOptions['cookie_lifetime'];
      $gcLifetime = $sessionOptions['gc_maxlifetime'];
      $gcExpire = $sessionMeta->getLastUsed() + $gcLifetime;
      $cookieExpire = $sessionMeta->getCreated() + $cookieLifetime;
      $sessionExpire = date('c', min($cookieExpire, $gcExpire));
    }
    else {
      // Unset the session expiration time.
      $sessionExpire = '';
    }
    $variables['page_bottom']['frontend_session_iframe'] += [
      '#type' => 'html_tag',
      '#tag' => 'iframe',
      '#value' => '',
      '#attributes' => [
        'src' => (getenv('NETLIFY_URL') ?: 'http://127.0.0.1:8000') . '/set-drupal-session?session_expire=' . rawurlencode($sessionExpire),
        'style' => 'width: 0; height: 0; border: none;',
      ],
    ];
  }
}

/**
 * Implements hook_tokens_alter() for nodes.
 *
 * @param array $replacements
 * @param array $context
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 *
 * @return void
 */
function custom_tokens_alter(array &$replacements, array $context, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  if ($context['type'] == 'node' && !empty($context['data']['node'])) {
    /* @var Drupal\node\NodeInterface $node */
    $node = $context['data']['node'];
    // In case there is no value for the seo title field, then we actually want
    // to fall back to the label (title) of the node itself.
    if (isset($context['tokens']['field_seo_title']) && empty($replacements[$context['tokens']['field_seo_title']])) {
      $replacements[$context['tokens']['field_seo_title']] = $node->label();
    }
  }
}
