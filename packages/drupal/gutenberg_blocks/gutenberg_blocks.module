<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\silverback_gutenberg\Utils;
use Drupal\webform\Entity\Webform;
use Drupal\Core\Url;

/**
* Implements hook_library_info_alter().
*/
function gutenberg_blocks_library_info_alter(&$libraries, $extension) {
  if ($extension === 'gutenberg') {
    $libraries['edit-node']['dependencies'][] = 'gutenberg_blocks/customisations';
    // The Gutenberg module upgrade (2.2 to 2.4) brought Gutenberg library
    // upgrade (8.4.0 to 10.7.0) and a new CSS file which broke the editor
    // styling.
    // Remove this file.
    unset($libraries['block-library']['css']['base']['vendor/gutenberg/block-library/reset.css']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gutenberg_blocks_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if (Utils::getGutenbergFields($node)) {
    // Perhaps move in Silverback preview link module.
    $form['actions']['preview_link'] = [
      '#type' => 'link',
      '#title' => t('Preview'),
      '#url' => Url::fromRoute('<current>'),
      '#attributes' => [
        'class' => [
          'button',
          'button--primary',
        ],
      ],
    ];
    // Add preview url for editor preview.
    /** @var \Drupal\silverback_external_preview\ExternalPreviewLink $externalPreviewLink */
    $externalPreviewLink = \Drupal::service('silverback_external_preview.external_preview_link');
    $previewUrl = $externalPreviewLink->createPreviewUrlFromEntity($node)->toString();
    $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
    $form['#attached']['drupalSettings']['preview'] = [
      'previewUrl' => $previewUrl,
      // @todo link template does not work out here, check why.
      //'previewTokenUrl' => $node->toUrl('preview-link-generate')->toString(),
      'previewTokenUrl' => '/' . $langcode . '/node/' . $node->id() . '/generate-preview-link',
    ];
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';

    // Load all open webforms and populate them into drupalSettings.
    $languageManager = \Drupal::languageManager();
    $originalLanguage = $languageManager->getConfigOverrideLanguage();
    $language = $languageManager->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
    $languageManager->setConfigOverrideLanguage($language);
    $webforms = array_filter(Webform::loadMultiple(), fn($form) => $form->isOpen());
    uasort($webforms, fn($a, $b) => strnatcmp($a->label(), $b->label()));
    $languageManager->setConfigOverrideLanguage($originalLanguage);
    $forms = array_map(fn($form) => [
      'id' => $form->id(),
      'url' => $form->toUrl()->setAbsolute()->toString(),
      'label' => $form->label(),
    ], $webforms);
    $form['#attached']['drupalSettings']['customGutenbergBlocks']['forms'] = array_values($forms);

    // Bind the Gutenberg html edit features to a permission.
    $form['#attached']['drupalSettings']['gutenberg']['supportsHtml'] = Drupal::currentUser()->hasPermission('edit gutenberg html');
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function gutenberg_blocks_toolbar_alter(&$items) {
  // Unset the preview button from the toolbar for now,
  // as it's a duplicate of the one in the editor.
  // This could be configurable in the silverback_external_preview module
  // based on routes.
  if (array_key_exists('silverback_external_preview', $items)) {
    unset($items['silverback_external_preview']);
  }
}

/**
 * Prepares variables for custom image-teaser Gutenberg block template.
 *
 * @see template_preprocess_gutenberg_block
 */
function template_preprocess_gutenberg_block__custom__image_teaser(&$variables) {
  _template_preprocess_gutenberg_block_add_rendered_image($variables);
}

/**
 * Prepares variables for custom image-teaser Gutenberg block template.
 *
 * @see template_preprocess_gutenberg_block
 */
function template_preprocess_gutenberg_block__custom__image_with_text(&$variables) {
  _template_preprocess_gutenberg_block_add_rendered_image($variables);
}

/**
 * Helper function to inject a variable into gutenberg blocks that have a media
 * reference (through the mediaEntityIds block attribute). The injected variable
 * represents the rendered media.
 *
 * @return void
 */
function _template_preprocess_gutenberg_block_add_rendered_image(&$variables) {
  if (!empty($variables['block_attributes']['mediaEntityIds'])) {
    /** @var \Drupal\gutenberg\MediaEntityRendererInterface $media_entity_renderer */
    $media_entity_renderer = \Drupal::service('gutenberg.media_entity.renderer');
    $variables['rendered_image'] = $media_entity_renderer->renderArray(
      reset($variables['block_attributes']['mediaEntityIds']),
      $variables['block_attributes']['viewMode'] ?? 'default'
    );
  }
}
