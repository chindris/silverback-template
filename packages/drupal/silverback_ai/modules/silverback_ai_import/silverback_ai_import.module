<?php

/**
 * @file
 * Primary module hooks for silverback_ai_import module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * {@inheritdoc}
 */
function silverback_ai_import_form_alter(&$form, &$form_state, $form_id) {
  // @todo
  if ($form_id == 'views_exposed_form') {
    $service = \Drupal::service('silverback_ai_import.content');
    $url_value = 'https://www.tcs.ch/de/camping-reisen/camping-insider/community/backen-mit-dem-omnia.php';
    $ast = $service->getAstFromUrl($url_value);
    $flatten = $service->flattenAst($ast->content);
    // dpm($flatten);
    // $file = \Drupal::entityTypeManager()->getStorage('file')->load(11);
    // $ast = $service->getAstFromFilePath($file);
    $flatten = $service->flattenAst($ast->content);
    // dpm($ast->content);.
    foreach ($flatten as $el) {
      // dpm($el);
    }
    // dpm($flatten);
    $arr = json_decode(json_encode($ast), TRUE);
    $data = $arr['content'];
    /* $callback = function (&$item, $depth) {
    $item['xxx'] = 'xxx';
    }; */

    $service->iterateArray($data);
    dpm($data);
    // Example usage:
    /*
    foreach ($ast->content as $obj) {
    dpm($obj);
    $iterator = function ($key, $value) {
    $times = (int) $key * 1 + 1;
    $repeat = str_repeat(' ', (int) $times);
    if (isset($value->type) && !empty($value->type)) {
    // dpm($repeat . $value->type);.
    }
    };
    $service->iterateObject($obj, $iterator);
    }
     */
  }
}

/**
 * {@inheritdoc}
 */
function silverback_ai_import_form_node_page_split_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['import'] = [
    '#type' => 'details',
    '#title' => t('Import content'),
    '#open' => TRUE,
    '#weight' => 99,
  ];
  $form['import']['import_type'] = [
    '#type' => 'radios',
    '#title' => t('Import content from:'),
    '#options' => [
      'none' => t('Do not import any content'),
      'docx' => t('Microsoft Word file'),
      // 'pdf' => t("PDF file"),
      'url' => t("Remote HTML page"),
    ],
    '#default_value' => 'none',
  ];

  $form['import']['container_docx'] = [
    '#type' => 'container',
    '#states' => [
      'visible' => [
        'input[name="import_type"]' => ['value' => 'docx'],
      ],
    ],
  ];

  $form['import']['container_docx']['file'] = [
    '#type' => 'managed_file',
    '#title' => t('Select a Microsoft Word file'),
    '#description' => t('Select a Microsoft Word document to import content from.'),
    // @todo Update this to some private file path, shared with node service.
    '#upload_location' => 'public://converted/',
    '#multiple' => FALSE,
    '#attributes' => [
      'class' => ['file--import'],
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['doc docx DOC DOCX'],
    ],
  ];

  $form['import']['container_url'] = [
    '#type' => 'container',
    '#states' => [
      'visible' => [
        'input[name="import_type"]' => ['value' => 'url'],
      ],
    ],
  ];

  $form['import']['container_url']['url_value'] = [
    '#type' => 'url',
    '#title' => t('URL'),
    '#maxlength' => 1024,
  ];

  $form['actions']['submit']['#submit'][] = '_silverback_ai_import_form_submit';

  // Better to have this unpublished originally, and then
  // we will display a message to the user (esp. if there is AI content)
  $form['moderation_state']['#access'] = FALSE;
  $form['actions']['submit']['#value'] = t('Create');

}

/**
 * {@inheritdoc}
 */
function _silverback_ai_import_form_submit(array $form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $fid = reset($form_state->getValue('file'));
  $url_value = $form_state->getValue('url_value');

  $service = \Drupal::service('silverback_ai_import.content');
  $content = \Drupal::service('silverback_ai_import.batch.import');
  $type = $form_state->getValue('import_type');
  if ($fid && $type == 'docx') {
    $file = \Drupal::entityTypeManager()->getStorage('file')->load($fid);
    $ast = $service->getAstFromFilePath($file);
    $content->create($ast->content, $entity);

    // $flatten = $service->flattenAst($ast->content);
    // $content->create($flatten, $entity);
  }
  elseif (!empty($url_value) && $type == 'url') {
    $ast = $service->getAstFromUrl($url_value);
    $content->create($ast->content, $entity);

    // $flatten = $service->flattenAst($ast->content);
    // $content->create($flatten, $entity);
  }
}
